name: dump-contexts
on:
  workflow_dispatch:

jobs:
  dump:
    strategy:
      matrix:
        item:
          - item_1
          - item_2
        runs-on:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Generate an unique job ID
        id: job_id
        uses: actions/github-script@v6.3.1
        with:
          result-encoding: string
          script: |
            return require("crypto").randomBytes(20).toString("hex");

      - name: Get info for the job ID ${{ steps.job_id.outputs.result }}
        id: job_info
        uses: actions/github-script@v6.3.1
        env:
          JOB_ID: ${{ steps.job_id.outputs.result }}
        with:
          script: |
            const jobId = process.env.JOB_ID;
            for (let i = 0; i < 10; ++i) {
              if (i > 0) {
                await new Promise(r => setTimeout(r, i * 1000));
              }
              for await (const response of github.paginate.iterator(
                github.rest.actions.listJobsForWorkflowRun,
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: context.runId
                }
              )) {
                for (const job of response.data) {
                  for (const step of job.steps) {
                    if (step.name.includes(jobId)) {
                      core.startGroup(`Job info obtained on iteration ${i}`);
                      console.log(job);
                      core.endGroup();
                      return job;
                    }
                  }
                }
              }
            }
            core.error(`Cannot find ID ${jobId} in the job list`);
            return null;

      - name: Show job URL
        if: fromJSON(steps.job_info.outputs.result)
        uses: actions/github-script@v6.3.1
        env:
          JOB_URL: ${{ fromJSON(steps.job_info.outputs.result).html_url }}
        with:
          script: |
            console.log(process.env.JOB_URL);

      - name: Show job URL with fallback to run URL
        uses: actions/github-script@v6.3.1
        env:
          JOB_URL: ${{ fromJSON(steps.job_info.outputs.result).html_url || format('{0}/{1}/actions/runs/{2}', github.server_url, github.repository, github.run_id) }}
        with:
          script: |
            console.log(process.env.JOB_URL);

      - name: Dump JSON contexts
        env:
          github: ${{ toJSON(github) }}
          strategy: ${{ toJSON(strategy) }}
          matrix: ${{ toJSON(matrix) }}
          job: ${{ toJSON(job) }}
          runner: ${{ toJSON(runner) }}
          env: ${{ toJSON(env) }}
        uses: actions/github-script@v6.3.1
        with:
          script: |
            function dump(name, getData) {
              core.startGroup(name);
              try {
                console.log(getData());
              }
              catch (err) {
                core.error(`Cannot dump "${name}": ${err}`);
              }
              core.endGroup();
            }

            for (const name of ["github", "strategy", "matrix", "job", "runner", "env"]) {
              dump(name, () => { return JSON.parse(process.env[name]); });
            }
            dump("process.env", () => { return process.env; });
