name: CI Arch
on:
  workflow_call:
    inputs:
      system:
        required: true
        type: string
      runs-on:
        required: true
        type: string
      matrix:
        required: true
        type: string

jobs:
  flake:
    runs-on: ${{ inputs.runs-on }}
    if: fromJSON(inputs.matrix).flake.packages.package[0]
    strategy:
      matrix: ${{ fromJSON(inputs.matrix).flake.packages }}
    steps:
      - run: |
          echo "Building ${{ matrix.package }}"

  nur:
    runs-on: ${{ inputs.runs-on }}
    if: >
      fromJSON(inputs.matrix).nur.check[0] &&
      fromJSON(inputs.matrix).nur.channel[0]
    strategy:
      matrix: ${{ fromJSON(inputs.matrix).nur }}
    steps:
      - run: |
          echo "Building ${{ matrix.check }} on ${{ matrix.channel }}"

  nur-main:
    needs:
      - flake
    runs-on: ${{ inputs.runs-on }}
    if: >
      always() &&
      (needs.flake.result == 'success' || needs.flake.result == 'skipped') &&
      fromJSON(inputs.matrix).nur-main.check[0] &&
      fromJSON(inputs.matrix).nur-main.channel[0]
    strategy:
      matrix: ${{ fromJSON(inputs.matrix).nur-main }}
    steps:
      - run: |
          echo "Building ${{ matrix.check }} on ${{ matrix.channel }}"

  flake-hosts:
    needs:
      - flake
    runs-on: ${{ inputs.runs-on }}
    if: >
      always() &&
      (needs.flake.result == 'success' || needs.flake.result == 'skipped') &&
      fromJSON(inputs.matrix).flake.hosts.host[0]
    strategy:
      matrix: ${{ fromJSON(inputs.matrix).flake.hosts }}
    steps:
      - run: |
          echo "Building ${{ matrix.host }}"

  flake-checks:
    needs:
      - flake
    runs-on: ${{ inputs.runs-on }}
    if: >
      always() &&
      (needs.flake.result == 'success' || needs.flake.result == 'skipped') &&
      fromJSON(inputs.matrix).flake.checks.check[0]
    strategy:
      matrix: ${{ fromJSON(inputs.matrix).flake.checks }}
    steps:
      - run: |
          echo "Building ${{ matrix.check }}"
