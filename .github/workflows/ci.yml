name: CI
on:
  push:
    branches:
      - main
      - master
  pull_request:
  workflow_dispatch:
    inputs:
      flake_only:
        description: 'Run flake tests only'
        default: false
        type: boolean

defaults:
  run:
    # Use `bash` by default.  Note that, according to the documentation, the
    # real command is `bash --noprofile --norc -eo pipefail {0}`, which makes
    # the shell catch any errors in pipelines.
    shell: bash

env:
  CACHIX_NAME: sigprof

  nur_systems: x86_64-linux
  nur_channels: nixpkgs-unstable nixos-unstable nixos-22.05 nixos-21.11
  nur_main_channel: nixos-22.05

  flake_only: >-
    ${{
      (!!inputs.flake_only) ||
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.head.repo.full_name == 'sigprof/test-workflows' &&
        startsWith(github.event.pull_request.head.ref, 'automatic-flake-update/')
      )
    }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2.4.2
      - uses: sigprof/install-nix-action@6c5ba55bfdc791cfad61ac72e473340c1c3ac992
      - uses: cachix/cachix-action@v10
        with:
          name: ${{ env.CACHIX_NAME }}
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          extraPullNames: "pre-commit-hooks"
      - run: nix flake check --no-build
      - id: matrix
        name: Prepare matrix
        run: |
          flake_matrix="$(nix eval --json .\#lib.ciData.matrix)"
          echo "::group::Flake matrix:"
          printf '%s' "$flake_matrix" | jq
          echo "::endgroup::"
          nur_matrix=""
          for system in $nur_systems; do
            for channel in $nur_channels; do
              if [ "$channel" = "$nur_main_channel" ]; then
                job="main"
              else
                job="other"
              fi
              nur_matrix_part="$(
                NIX_PATH="nixpkgs=channel:$channel" \
                  nix eval --json -f nur.nix lib.ciData.matrix |
                  jq --arg system "$system" --arg channel "$channel" --arg job "$job" '
                    path(.[].nur.packages.item) as $x
                    | getpath($x)
                    | {
                        ($x[0]): {
                          nur: {
                            ($job): {
                              include: [
                                {
                                  channel: $channel,
                                  item: .[]
                                }
                              ]
                            }
                          }
                        }
                      }
                  '
              )"
              echo "::group::NUR matrix part ($system, $channel):"
              printf '%s' "$nur_matrix_part" | jq
              echo "::endgroup::"
              nur_matrix="$nur_matrix$nur_matrix_part"
            done
          done
          matrix="$(
            printf '%s' "$flake_matrix$nur_matrix" |
              jq -c -n '
                def mergeRecursive(a; b):
                  a as $a | b as $b
                  | if ($a|type) == "object" and ($b|type) == "object"
                    then reduce ([$a, $b] | add | keys_unsorted[]) as $k (
                      {};
                      .[$k] = mergeRecursive($a[$k]; $b[$k])
                    )
                    elif ($a|type) == "array" and ($b|type) == "array"
                    then $a + $b
                    elif $b == null then $a
                    else $b
                end;
                reduce inputs as $item ({}; mergeRecursive(.; $item))
              '
          )"
          echo "::group::Final matrix:"
          printf '%s' "$matrix" | jq
          echo "::endgroup::"
          printf '::set-output name=matrix::%s\n' "$matrix"
 
  x86_64-linux:
    needs:
      - setup
    uses: ./.github/workflows/ci-per-system.yml
    with:
      system: x86_64-linux
      runs-on: ubuntu-latest
      matrix: ${{ toJSON(fromJSON(needs.setup.outputs.matrix).x86_64-linux) }}
    secrets: inherit

  finish:
    needs:
      - x86_64-linux
    runs-on: ubuntu-latest
    steps:
      - run: echo "Dummy finish"
