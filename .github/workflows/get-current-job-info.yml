# This workflow shows how to get the job info for the currently running
# workflow job, which includes the URL for the page with the job output log.
name: get-current-job-info
on:
  workflow_dispatch:

jobs:
  test:
    # Run multiple instances of this job to demonstrate that job info for the
    # correct job is selected.
    strategy:
      matrix:
        item:
          - item_1
          - item_2
        runs-on:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Generate an unique job ID
        # The first step is to generate an identifier which is unique for this
        # particular invocation of the job.
        id: job_id
        uses: actions/github-script@v6.4.1
        with:
          result-encoding: string
          script: |
            return require("crypto").randomBytes(20).toString("hex");

      - name: Get info for the job ID ${{ steps.job_id.outputs.result }}
        # The second step is actually getting the job info from the GitHub API.
        # The step name must contain the unique ID generated by the `job_id`
        # step above.
        #
        # The `listJobsForWorkflowRun` API returns job info for all jobs in the
        # workflow run specified by `run_id`; the script selects the job which
        # contains the unique ID in a step name.  Multiple iterations with
        # delays are required, because step names are not updated immediately,
        # and at the initial iteration the step name might still show the
        # unexpanded expression.
        #
        id: job_info
        uses: actions/github-script@v6.4.1
        env:
          # The ID which was substituted into the step name needs to be passed
          # to the script.
          JOB_ID: ${{ steps.job_id.outputs.result }}
        with:
          script: |
            const jobId = process.env.JOB_ID;
            for (let i = 1; i <= 10; ++i) {
              await new Promise(r => setTimeout(r, i*1000 - 500));
              for await (const response of github.paginate.iterator(
                github.rest.actions.listJobsForWorkflowRun,
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: context.runId
                }
              )) {
                for (const job of response.data) {
                  for (const step of job.steps) {
                    if (step.name.includes(jobId)) {
                      core.startGroup(`Job info obtained on iteration ${i}`);
                      console.log(job);
                      core.endGroup();
                      return job;
                    }
                  }
                }
              }
            }
            core.error(`Cannot find ID ${jobId} in the job list`);
            return null;

      - name: Show job URL
        # This step demonstrates how to check whether the job info is available
        # using an expression.  It will be skipped if the `job_info` step
        # failed to get the job info for some reason.
        if: fromJSON(steps.job_info.outputs.result)
        uses: actions/github-script@v6.4.1
        env:
          JOB_URL: ${{ fromJSON(steps.job_info.outputs.result).html_url }}
        with:
          script: |
            console.log(process.env.JOB_URL);

      - name: Show job URL with fallback to run URL
        uses: actions/github-script@v6.4.1
        env:
          # This step demonstrates how to get the URL for the job log page with
          # a fallback to the summary page in case the `job_info` step failed
          # to obtain the job info.
          JOB_URL: ${{ fromJSON(steps.job_info.outputs.result).html_url || format('{0}/{1}/actions/runs/{2}', github.server_url, github.repository, github.run_id) }}
        with:
          script: |
            console.log(process.env.JOB_URL);
