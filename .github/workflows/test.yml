name: Test
on:
  workflow_dispatch:
    inputs:
      matrixOverride:
        required: false
        description: >
          Matrix override for the manual workflow run (replaces the default matrix completely).

          Simplified syntax: source=owner/repo/branch; nixPath=nixpkgs=channels:nixos-unstable; os=ubuntu-latest,macos-latest

          Alternatively, you can specify a JSON object directly (in this case a
          key may be mapped either to a single value or to an array of possible
          values).

          Unspecified keys will inherit their sets of possible values from the
          default matrix.

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.result }}
      error: ${{ steps.pendingPR.outputs.error }}
    steps:
      - id: parse
        name: Parse inputs for manually triggered workflow
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/github-script@v6.2.0
        with:
          # This script needs to be able to return an empty string in some
          # cases, which is not possible if the JSON encoding is used.
          result-encoding: string
          script: |
            // The `?.` operator does not work
            const payload = context.payload;
            const inputs = payload && payload.inputs;
            const matrixOverrideStr = inputs && inputs.matrixOverride && inputs.matrixOverride.trim();

            if (!matrixOverrideStr) {
              core.info("No matrix override specified.");
              return "";
            };

            let matrixOverride = {};

            if (matrixOverrideStr.startsWith("{")) {
              // Parse the parameter as raw JSON.
              try {
                matrixOverride = JSON.parse(matrixOverrideStr);
              } catch (error) {
                core.setFailed(
                  `Invalid workflow input 'matrixOverride': "${matrixOverrideStr}".\n`+
                  `JSON parse failed: ${error.toString()}`
                );
                return "";
              }
            } else {
              // Parse the simplified syntax.
              const params = matrixOverrideStr.split(/\s*;\s*/);
              for (param of params) {
                const nameAndValues = param.match(/^([^=\s]+)\s*=\s*(.*)$/);
                if (!nameAndValues[1] || !nameAndValues[2]) {
                  core.setFailed(
                    `Invalid workflow input 'matrixOverride': "${matrixOverrideStr}".\n`+
                    `Invalid parameter specification "${param}".`
                  );
                  return "";
                }
                const name = nameAndValues[1];
                if (matrixOverride[name]) {
                  core.setFailed(
                    `Invalid workflow input 'matrixOverride': "${matrixOverrideStr}".\n`+
                    `Duplicate key "${name}".`
                  );
                  return "";
                }
                const values = nameAndValues[2].split(/\s*,\s*/);
                matrixOverride[name] = values;
              }
            }

            core.startGroup("Matrix override:");
            console.log(matrixOverride);
            core.endGroup();

            return JSON.stringify(matrixOverride);

      - id: pendingPR
        name: Discover pending PR refs
        uses: actions/github-script@v6.2.0
        if: ${{ !steps.parse.outputs.result }}
        with:
          script: |
            const upstreamRepoName = { owner: 'qmk', repo: 'qmk_firmware' };
            const myBranchName = { owner: 'sigprof', repo: 'qmk_firmware', branch: 'nix-shell-updates' };

            function dumpObject(header, data) {
              core.startGroup(`${header}:`);
              console.log(data);
              core.endGroup();
            }

            let result = {
              source: []
            };

            let personalBranch
            try {
              personalBranch = await github.rest.repos.getBranch(myBranchName);
              dumpObject('personalBranch', personalBranch);
            } catch (e) {
              dumpObject('Error getting personalBranch', e);
              if (e.name === 'HttpError' && e.status === 404) {
                core.info('The PR source branch does not exist in the personal repository.');
                // A pending PR cannot exist without the source branch.
                return null;
              } else {
                throw e;
              }
            }
            result.source.push({
              repo: `${myBranchName.owner}/${myBranchName.repo}`,
              ref: myBranchName.branch
            });

            let pulls
            try {
              pulls = await github.rest.pulls.list({
                ...upstreamRepoName,
                state: 'open',
                head: `${myBranchName.owner}:${myBranchName.branch}`,
                sort: 'created'
              });
              dumpObject('pulls', pulls);
            } catch (e) {
              dumpObject('Error getting pulls', e);
              throw e;
            }

            if (!pulls.data.length) {
              core.info(`There is no open pull request for the '${myBranchName.branch}' branch.`);
              return null;
            }
            if (pulls.data.length > 1) {
              core.warning(`There is more than one pull request for the '${myBranchName.branch}' branch.`);
            }

            let pullNumbers = []
            for (pull of pulls.data) {
              let updatedPull
              for (let i = 1; i <= 10; ++i) {
                try {
                  updatedPull = await github.rest.pulls.get({ ...upstreamRepoName, pull_number: pull.number });
                  dumpObject('updatedPull', updatedPull);
                } catch (e) {
                  dumpObject('Error getting updated pull request data', e);
                  updatedPull = null
                }
                if (updatedPull && (updatedPull.data.mergeable !== null)) {
                  break;
                }
                await new Promise(r => setTimeout(r, i * 1000));
              }
              if (updatedPull) {
                if (updatedPull.data.mergeable === null) {
                  core.warning(`Could not get mergeable status for ${pull.html_url}`);
                } else if (updatedPull.data.mergeable === false) {
                  core.error(`Pull request ${pull.html_url} is not mergeable`);
                  // TODO: raise failure somehow while still processing the rest of workflow
                } else if (updatedPull.data.mergeable === true) {
                  core.info(`Pull request ${pull.html_url} is mergeable, will test it`);
                  pullNumbers.push(pull.number);
                } else {
                  core.error(`Unexpected value for "mergeable" (see the last updatedPull)`);
                  // TODO: fail
                }
              } else {
                core.warning(`Could not update status for ${pull.html_url}`);
              }
            }

            for (number of pullNumbers) {
              result.source.push({
                repo: `${upstreamRepoName.owner}/${upstreamRepoName.repo}`,
                ref: `refs/pull/${number}/merge`
              });
            }
            dumpObject('result', result);

            return result;

      - id: matrix
        name: Prepare the matrix
        uses: actions/github-script@v6.2.0
        env:
          MATRIX_OVERRIDE: ${{ steps.parse.outputs.result }}
        with:
          script: |
            const rawDefaultMatrix = {
              source: [
                "qmk/qmk_firmware/master",
                "qmk/qmk_firmware/develop",
              ],
              nixPath: [
                "nixpkgs=channel:nixos-20.09"
              ],
              os: [
                "ubuntu-latest",
                "macos-latest"
              ]
            };

            // Replace "owner/repo/ref" with a JSON object for easier usage:
            // { repo: "owner/repo", ref: "ref" }
            function parseSource(source) {
              if (typeof source === "string") {
                const match = source.match(/^([^\/]*(?:\/[^\/]*)?)(?:\/(.*))?$/);
                return { repo: match[1], ref: match[2] || "" };
              }
              return source;
            }

            function parseSourcesInMatrix(matrix) {
              let source = matrix && matrix.source;
              if (source) {
                if (Array.isArray(source)) {
                  source = source.map(parseSource);
                } else {
                  source = parseSource(source);
                }
                return { ...matrix, source: source };
              }
              return matrix;
            }

            const defaultMatrix = parseSourcesInMatrix(rawDefaultMatrix);

            const matrixOverrideStr = process.env.MATRIX_OVERRIDE;
            const rawMatrixOverride = matrixOverrideStr && JSON.parse(matrixOverrideStr);
            let matrixOverride = null;
            if (rawMatrixOverride) {
              core.startGroup("Matrix override:");
              core.info(JSON.stringify(rawMatrixOverride, null, 2));
              core.endGroup();
              matrixOverride = parseSourcesInMatrix(rawMatrixOverride);
            }

            function expandEntryKeys(entry, keys, startPos) {
              for (let i = startPos; i < keys.length; ++i) {
                const key = keys[i];
                const value = entry[key];
                if (Array.isArray(value)) {
                  return value.flatMap(x => expandEntryKeys({ ...entry, [key]: x }, keys, i + 1));
                }
              }
              return [entry];
            }

            function expandEntry(entry) {
              return expandEntryKeys(entry, Object.keys(entry), 0);
            }

            function addToMatrix(entry) {
              const fullEntry = { ...defaultMatrix, ...entry };
              matrix.include = (matrix.include || []).concat(expandEntry(fullEntry));
            }

            let matrix
            if (matrixOverride) {
              const overrideEntry = { ...defaultMatrix, ...matrixOverride };
              matrix = expandEntry(overrideEntry);
            } else {
              matrix = { ...defaultMatrix };
              addToMatrix({
                source: { repo: "sigprof/qmk_firmware", ref: "nix-shell-updates" },
                extra: "extraValue"
              });
            }

            core.startGroup("Job matrix:");
            core.info(JSON.stringify(matrix, null, 2));
            core.endGroup();

            return matrix;

  dump:
    name: Dump
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Report data
        env:
          DATA: ${{ needs.setup.outputs.matrix }}
        run: |
          printf '%s' "$DATA" | jq

  #un:
  # name: Run
  # needs: setup
  # runs-on: ubuntu-latest
  # strategy:
  #   matrix: ${{ fromJSON(needs.setup.outputs.matrix) }}
  # steps:
  #   - name: Report matrix value
  #     env:
  #       DATA: ${{ toJSON(matrix) }}
  #     run: |
  #       printf '%s' "$DATA" | jq

  #ain:
  # name: Main job
  # needs: init
  # strategy:
  #   matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
  # runs-on: ${{ matrix.os }}
  # steps:
  #   - name: Report matrix values
  #     run: |
  #       echo "Repo: ${{ matrix.source.repo }}"
  #       echo "Ref:  ${{ matrix.source.ref  }}"
  #       echo "nixPath: ${{ matrix.nixPath }}"

  report_errors:
    name: Report errors
    needs:
      - setup
      - dump
    if: >-
      ${{ always() && (needs.setup.result == 'success') && (needs.setup.outputs.error) }}
    runs-on: ubuntu-latest
    steps:
      - name: Report setup errors
        run: |
          printf '%s\n' \
            "${{ needs.setup.outputs.error }}"
          exit 1
