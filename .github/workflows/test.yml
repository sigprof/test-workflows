name: Test
on:
  workflow_dispatch:
    inputs:
      matrix:
        description: >
          Matrix override for the manual workflow run.  Specify a JSON value
          which overrides the `source`, `nixPath` and `os` keys as desired.
          Unspecified keys will inherit the sets of values from the default
          matrix.
        required: false

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.result }}
    steps:
      - id: parse
        name: Parse workflow inputs
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/github-script@v4.0.2
        with:
          script: |
            const payload = context.payload;
            const inputs = payload && payload.inputs;
            const matrixInput = inputs && inputs.matrix;
            if (matrixInput) {
              try {
                const matrix = JSON.parse(matrixInput);
                console.log("Custom matrix:", matrix);
              } catch (error) {
                console.error("JSON parse error for the `matrix` input:", error);
                throw error;
              }
            } else {
              console.log("No `matrix` input specified.");
            }

      - id: matrix
        name: Prepare the matrix
        uses: actions/github-script@v4.0.2
        with:
          script: |
            const defaultMatrix = {
              source: [
                { repo: "qmk/qmk_firmware", ref: "master"  },
                { repo: "qmk/qmk_firmware", ref: "develop" },
              ],
              nixPath: [ "nixpkgs=channel:nixos-20.09" ],
              osPlaceholder: [ "ubuntu-latest", "macos-latest" ]
            };

            var matrix = { ...defaultMatrix };

            function expandEntryKeys(entry, keys, startPos) {
              for (let i = startPos; i < keys.length; ++i) {
                const key = keys[i];
                const value = entry[key];
                if (Array.isArray(value)) {
                  return value.flatMap(x => expandEntryKeys({ ...entry, [key]: x }, keys, i + 1));
                }
              }
              return [entry];
            }

            function expandEntry(entry) {
              return expandEntryKeys(entry, Object.keys(entry), 0);
            }

            function addToMatrix(entry) {
              const fullEntry = { ...defaultMatrix, ...entry };
              matrix.include = (matrix.include || []).concat(expandEntry(fullEntry));
            }

            addToMatrix({
              source: { repo: "sigprof/qmk_firmware", ref: "nix-shell-updates" },
              extra: "extraValue"
            });

            return matrix;

  dump:
    name: Dump
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Report data
        env:
          DATA: ${{ needs.setup.outputs.matrix }}
        run: |
          printf '%s' "$DATA" | jq

  #un:
  # name: Run
  # needs: setup
  # runs-on: ubuntu-latest
  # strategy:
  #   matrix: ${{ fromJSON(needs.setup.outputs.matrix) }}
  # steps:
  #   - name: Report matrix value
  #     env:
  #       DATA: ${{ toJSON(matrix) }}
  #     run: |
  #       printf '%s' "$DATA" | jq

  #ain:
  # name: Main job
  # needs: init
  # strategy:
  #   matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
  # runs-on: ${{ matrix.os }}
  # steps:
  #   - name: Report matrix values
  #     run: |
  #       echo "Repo: ${{ matrix.source.repo }}"
  #       echo "Ref:  ${{ matrix.source.ref  }}"
  #       echo "nixPath: ${{ matrix.nixPath }}"

